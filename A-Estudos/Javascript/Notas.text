ðŸ“š Aula: Call Stack, Event Loop, Task Queue e Microtasks no JavaScript

1 - (JavaScript Ã© Single threaded): executa uma unica coisa por vez;
2 - Call Stack (Pilha de chamadas): Funciona como um LIFO 'Last in, Firt Out' ou 'Ultimo a entrar, primeiro a sair'
3 - Web API (O mundo "externo do JS"): FunÃ§Ãµes que rodam pelo Navegador Fetch, setTimeout, Eventos DOM, setIntervarl etc... 
ele recebe essas funÃ§Ãµes, processa elas de forma assincrona, quando terminar coloca o resultado na pilha certa para que o event loop busque
4 - Task Queue ou CallBack Queue (Fila de macrotasks): Onde caem as macrotasks, Quando a Call Stack estÃ¡ vazia o Event loop busca a 
prÃ³xima macrotask da fila e executa
5 - Microtasks Queue: Microtaskas tÃªm maior prioridade do que macrotasks, elas sÃ£o (Promise.then / Promise.catch / Promise.finally 
queueMicrotask()). Depois quem uma funÃ§Ã£o de Call Stack termina, antes de pegar uma nova Macrotaskc, o Event Loop executa todas as Microtasks pendentes.
6 - Event Loop (O Maestro): Funciona assim:
  1 - Verifica de call Stack estÃ¡ vazia,
  2 - Se estiver pega todas as microtasks pendentes e as executa,
  3 - Se nÃ£o ouver microtasks pensentes busca a proxima Macrotask na Task Queue e a executa,



Analogia simples ðŸŽ­

Call Stack â†’ O palco onde os atores estÃ£o atuando.

Web APIs â†’ Bastidores, onde outros trabalhadores estÃ£o preparando coisas.

Task Queue (Macrotasks) â†’ Fila de atores esperando para entrar em cena.

Microtasks â†’ Figurantes com passe VIP que entram antes de todo mundo.

Event Loop â†’ O diretor que controla quem entra no palco.

//////
Task Queue, CallBack Queue ou Macrotask Queue sÃ£o a mesma coisa, apenas nomes diferentes.